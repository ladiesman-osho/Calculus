package main

import (
	"fmt" // Пакет реализует форматированный ввод и вывод.
)

func toRoman(number int) string {
	// Вводим переменную для возврата в будущем преобразованного числа.
	result := ""
	/*
	  Затем, в цикле, происходит перебор символов римской записи в порядке убывания их значения. Каждый символ
	  представлен структурой, содержащей значение символа и сам символ. Например, символ "C" представлен значением 100.
	*/
	symbols := []struct {
		Value  int
		Symbol string
	}{
		{100, "C"},
		{90, "XC"},
		{80, "LXXX"},
		{70, "LXX"},
		{60, "LX"},
		{50, "L"},
		{40, "XL"},
		{30, "XXX"},
		{10, "X"},
		{9, "IX"},
		{5, "V"},
		{4, "IV"},
		{1, "I"},
	}
	for _, symbol := range symbols {
		/*
		   Внутри цикла проверяется, является ли значение "number" большим или равным значению символа. Если это так,
		   символ добавляется к строке "result", а значение "number" уменьшается на значение символа. Таким образом, мы
		   "вычитаем" символ из исходного числа.
		*/
		for number >= symbol.Value {
			result += symbol.Symbol
			number -= symbol.Value
		}
		/*
		   После завершения цикла исходное число "number" становится равным нулю, и возвращается строка "result",
		   содержащая римскую запись числа.
		*/
	}

	return result // Возвращаем результат преобразования
}

func main() {
	for i := 1; i <= 100; i++ {
		res := toRoman(i)
		fmt.Println(res)
	}
}
